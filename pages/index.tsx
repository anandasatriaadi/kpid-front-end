import {
  Button,
  Card,
  Form,
  Input,
  message,
  Modal,
  TimePicker,
  UploadFile,
  UploadProps,
} from "antd";
import Upload, { RcFile } from "antd/lib/upload";
import Dragger from "antd/lib/upload/Dragger";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ReactElement, useContext, useState } from "react";
import ChartCard from "../components/ChartCard";
import Layout from "../components/Layout";
import { BASE_URL } from "../config/Production";
import { AuthContext, AuthContextInterface } from "../context/AuthContext";
import { isNilOrEmpty } from "../utils/CommonUtil";
import { chart1 } from "./statistic";
import { NextPageWithLayout } from "./_app";
import { UploadOutlined } from "@ant-design/icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFileVideo } from "@fortawesome/free-solid-svg-icons";

const Home: NextPageWithLayout = () => {
  const router = useRouter();
  const { isLoggedIn, logout } = useContext(
    AuthContext
  ) as AuthContextInterface;

  const [uploadFile, setUploadFile] = useState<UploadFile>();
  const [uploading, setUploading] = useState<Boolean>(false);
  const [form] = Form.useForm();

  const onFinish = (values: any) => {
    console.log(values);
    let form = new FormData();
    for (const key in values) {
      form.append(key, values[key]);
    }

    form.append("video_file", uploadFile as RcFile);

    let requestOptions: RequestInit = {
      method: "POST",
      body: form,
      redirect: "follow",
      headers: {
        Authorization: `${localStorage.getItem("token")}`,
      },
    };

    console.log(form.forEach((value, key) => console.log(key, value)));

    fetch(BASE_URL + "/api/moderation-form", requestOptions)
      .then((response) => {
        if (response.status == 401) {
          logout();
        }
        return response.json();
      })
      .then((result) => {
        if (result.status == 201) {
          message.success(result.data);
          setTimeout(() => {
            router.push("/login");
          }, 200);
        } else {
          message.error(result.data);
        }
      })
      .catch((error) => console.log("error", error));
  };

  const onFinishFailed = (errorInfo: any) => {
    if (!isLoggedIn) {
      router.push("/login");
    }
    console.log("Failed:", errorInfo);
  };

  const fileDropProps: UploadProps = {
    name: "file",
    maxCount: 1,
    beforeUpload: (file) => {
      if (isLoggedIn) {
        setUploadFile(file);
        return false;
      } else {
        message.error("Anda harus login terlebih dahulu");
        return false;
      }
    },
    onRemove: () => {
      form.resetFields();
      setUploadFile(undefined);
    },
    fileList: uploadFile ? [uploadFile] : [],
  };

  return (
    <>
      <Head>
        <title>Moderasi Video | KPID Jawa Timur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section>
        <h1 className="text-center text-3xl font-bold">
          Moderasi Konten Video KPID Jawa Timur
        </h1>
        <div className="flex gap-4">
          <Card
            className="flex-1 mt-6 mb-2 rounded-md shadow-lg"
            bodyStyle={{ padding: "12px" }}
          >
            <h3 className="text-lg">Video Terunggah</h3>
            <p className="text-2xl font-bold">2048</p>
          </Card>
          <Card
            className="flex-1 mt-6 mb-2 rounded-md shadow-lg"
            bodyStyle={{ padding: "12px" }}
          >
            <h3 className="text-lg">Video Terdeteksi Melanggar</h3>
            <p className="text-2xl font-bold">1024</p>
          </Card>
        </div>
        <ChartCard chartData={chart1} title={chart1.title}></ChartCard>
      </section>
      <section className="flex-1 flex justify-center">
        <div className="flex-1">
          <div
            className={
              (isLoggedIn ? "bg-sky-50" : "bg-gray-100") +
              " flex-1 p-4 rounded-xl shadow-xl"
            }
          >
            <Dragger
              {...fileDropProps}
              accept="video/*"
              disabled={!isLoggedIn}
              className={
                "flex justify-center items-center h-80 rounded-md border-2 border-dashed border-gray-400 bg-transparent"
              }
            >
              <div className="flex flex-col text-lg">
                <div className="flex justify-center">
                  <span>
                    <FontAwesomeIcon
                      icon={faFileVideo}
                      width={"36px"}
                      className={isLoggedIn ? "text-sky-500" : "text-gray-300"}
                    />
                  </span>
                </div>
                <div className="flex justify-center">
                  <Button
                    type="primary"
                    className="flex items-center text-lg mt-2"
                    disabled={!isLoggedIn}
                    icon={<UploadOutlined />}
                  >
                    Pilih Video
                  </Button>
                </div>
                <span className="mt-2 text-gray-900">
                  {isLoggedIn ? (
                    <p>atau letakkan video anda disini</p>
                  ) : (
                    <>
                      <p>
                        Anda harus{" "}
                        <Link href={"/login"}>
                          <a className="font-bold">login</a>
                        </Link>{" "}
                        terlebih dahulu
                      </p>
                      <div className="text-base text-center">
                        Belum memiliki akun?{" "}
                        <Link href={"/login?tab=register"}>
                          <a className="font-bold">Register</a>
                        </Link>
                      </div>
                    </>
                  )}
                </span>
              </div>
            </Dragger>
          </div>
        </div>

        <Modal centered open={!isNilOrEmpty(uploadFile)} footer={null}>
          <Form
            form={form}
            name="moderation_form"
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
            layout="vertical"
            className="pt-4"
          >
            <div>
              <Upload {...fileDropProps} accept="video/*"></Upload>
              <Form.Item
                className="text-lg my-4"
                initialValue={""}
                label="Nama Program"
                name="program"
                rules={[
                  {
                    required: true,
                    message: "Masukkan nama program",
                  },
                ]}
              >
                <Input className="text-lg font-normal" />
              </Form.Item>
              <Form.Item
                className="text-lg my-4"
                initialValue={""}
                label="Stasiun Televisi"
                name="television"
                rules={[
                  {
                    required: true,
                    message: "Masukkan stasiun televisi",
                  },
                ]}
              >
                <Input className="text-lg font-normal" />
              </Form.Item>
              <Form.Item
                className="text-lg my-4"
                initialValue={""}
                label="Waktu Mulai"
                name="start_time"
                rules={[
                  {
                    required: true,
                    message: "Masukkan waktu mulai",
                  },
                ]}
              >
                <TimePicker
                  className="text-lg w-full font-normal"
                  format={"HH:mm"}
                ></TimePicker>
              </Form.Item>
            </div>

            <div className="flex justify-end mt-8">
              <Button className="text-lg" type="primary" htmlType="submit">
                Upload
              </Button>
            </div>
          </Form>
        </Modal>
      </section>
    </>
  );
};

export default Home;

Home.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};
